def fake_api_call(prompt):
    """Call api

    Args:
        prompt (string): Prompt passed to llm

    Returns:
        string: Answer generated by llm
    """
    return f"API call with prompt: {prompt}"


def run_expression(expression, depth=0):
    """Logic for processing a single expression

    Args:
        expression: A single expression looks like this
        {
            "id": 1,
            "type": "expression",
            "main": true,
            "prompt": "Reference 1: [0],\n Reference 2: [1]",
            "output_type": "string",
            "input_list": [
                "alpha team"
            ],
            "web_list": [
                "www.nc.com"
            ],
            "main_list": [],
            "fixed_list": [],
            "reference_list": [
                {
                    "type": "input",
                    "id": 0
                },
                {
                    "type": "web",
                    "id": 0
                }
            ]
        },
    """
    # handle references
    prompt = expression["prompt"]
    reference_list = expression["reference_list"]
    for ix, refer in enumerate(reference_list):
        type = refer["type"]
        id = refer["id"]
        prompt = prompt.replace(f"[{ix}]", expression[type+"_list"][id])
    answer = fake_api_call(prompt)
    expression["output"] = answer
    print(f"{(depth + 1) * 2 * '-'}{expression['id']}\n{(depth + 1) * 2 * '-'}Prompt:{prompt}\n{(depth + 1) * 2 * '-'}Answer:{answer}")
    return expression


def run_code(code, depth=0):
    print(f"{(depth + 1) * 2 * '-'}{str(code['id'])}")
    for code_or_expression in code["expressions"]:
        if (code_or_expression["type"] == "expression"):
            run_expression(code_or_expression, depth + 1)
        else:
            run_code(code_or_expression, depth + 1)


def run(template):
    for code_or_expression in template:
        if (code_or_expression["type"] == "expression"):
            run_expression(code_or_expression, 0)
        else:
            run_code(code_or_expression, 0)
